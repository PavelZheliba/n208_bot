// /wizards/manageProductsWizard.js
const { Scenes, Markup } = require('telegraf');
const ShopProduct = require('../models/ShopProduct');
const Cards = require('../models/Cards');
const ShopCategory = require('../models/ShopCategory');

// ========================================================================
// ===                   –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò                      ===
// ========================================================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤, —Ä–∞–∑–º–µ—Ä–æ–≤, —Ü–µ–Ω—ã).
 */
async function showProductManagementMenu(ctx, nmID) {
    const card = await Cards.findOne({ nmID });
    const shopProduct = await ShopProduct.findOne({ nmID });

    if (!card || !shopProduct) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.');
        return ctx.scene.leave();
    }

    ctx.wizard.state.cardData = card;
    ctx.wizard.state.shopProduct = shopProduct;
    ctx.wizard.state.nmID = nmID;

    const stockItems = shopProduct.sizes
        .filter(s => s.amount > 0)
        .map(s => `${s.name} - ${s.amount} —à—Ç.`);
    const stockInfo = stockItems.length > 0 ? stockItems.join('\n') : '–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ';

    const message = `<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º:</b>\n` +
        `<em>${card.title}</em>\n\n` +
        `<b>–ê—Ä—Ç–∏–∫—É–ª:</b> ${nmID}\n` +
        `<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${shopProduct.price} —Ä—É–±.\n\n` +
        `<b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b>\n` +
        `${stockInfo}`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏', 'edit_stock')],
        [Markup.button.callback('üìè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã', 'edit_sizes')],
        [Markup.button.callback('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', 'edit_price')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤', 'back_to_list')]
    ]);

    if (ctx.callbackQuery) {
        try {
            await ctx.editMessageText(message, { parse_mode: 'HTML', reply_markup: keyboard.reply_markup });
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        }
    } else {
        await ctx.replyWithHTML(message, keyboard);
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.
 */
async function showSizeManagementMenu(ctx) {
    const { nmID } = ctx.wizard.state;
    const card = await Cards.findOne({ nmID });
    const shopProduct = await ShopProduct.findOne({ nmID });

    if (!card || !card.sizes || card.sizes.length === 0) {
        await ctx.reply('–í —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤.');
        return showProductManagementMenu(ctx, nmID);
    }

    const activeSkus = new Set(shopProduct.sizes.map(s => s.sku));

    const sizeToggleButtons = card.sizes
        .filter(size => size.skus && size.skus.length > 0) // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ SKU —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        .map(size => {
            const sku = size.skus[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SKU –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const isActive = activeSkus.has(sku);
            const buttonText = `${isActive ? '‚úÖ' : '‚ùå'} ${size.techSize}`;
            const callbackData = `toggle_size:${sku}:${encodeURIComponent(size.techSize)}:${isActive ? '1' : '0'}`;
            return [Markup.button.callback(buttonText, callbackData)];
        });

    sizeToggleButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_product_menu')]);

    await ctx.editMessageText(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.\n\n' +
        '‚úÖ - —Ä–∞–∑–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω\n‚ùå - —Ä–∞–∑–º–µ—Ä —Å–∫—Ä—ã—Ç',
        Markup.inlineKeyboard(sizeToggleButtons)
    );
}


// ========================================================================
// ===                      –û–°–ù–û–í–ù–û–ô –ö–û–î –í–ò–ó–ê–†–î–ê                      ===
// ========================================================================

const manageProductsWizard = new Scenes.WizardScene(
    'MANAGE_PRODUCTS_WIZARD',

    // --- –®–ê–ì 0: –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ nmID ---
    async (ctx) => {
        const categoryCode = ctx.wizard.state.categoryCode;
        const category = await ShopCategory.findOne({ code: categoryCode });
        if (!category) {
            await ctx.reply('–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return ctx.scene.leave();
        }

        const cards = await Cards.find({ nmID: { $in: category.product_nmIDs } });
        const shopProducts = await ShopProduct.find({ nmID: { $in: category.product_nmIDs } });
        const shopProductMap = new Map(shopProducts.map(p => [p.nmID, p]));

        let message = `–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "<b>${category.name}</b>":\n\n`;

        if (cards.length === 0) {
            message += '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.';
        } else {
            cards.forEach(card => {
                const shopProduct = shopProductMap.get(card.nmID);
                message += `‚ñ™Ô∏è ${card.title}\n(${card.nmID}) - `;
                if (shopProduct) {
                    const stockItems = shopProduct.sizes.filter(s => s.amount > 0).map(s => `${s.name}-${s.amount}`);
                    const stockInfo = stockItems.length > 0 ? stockItems.join(', ') : '–Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ';
                    message += `‚úÖ –¶–µ–Ω–∞: ${shopProduct.price} —Ä—É–±. –û—Å—Ç–∞—Ç–∫–∏: ${stockInfo}\n\n`;
                } else {
                    message += `‚ö†Ô∏è <b>–¶–ï–ù–ê –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>\n\n`;
                }
            });
        }

        await ctx.replyWithHTML(message);
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (nmID) —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.');
        return ctx.wizard.next();
    },

    // --- –®–ê–ì 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ nmID, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —à–∞–≥–∞ ---
    async (ctx) => {
        if (!ctx.message || !ctx.message.text) { return; }
        if (ctx.message.text === '/cancel') { await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.'); return ctx.scene.leave(); }

        const nmID = parseInt(ctx.message.text, 10);
        if (isNaN(nmID)) { await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∞—Ä—Ç–∏–∫—É–ª.'); return; }

        const card = await Cards.findOne({ nmID }).lean();
        if (!card) {
            await ctx.reply(`–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${nmID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.`);
            return ctx.scene.leave();
        }

        const shopProduct = await ShopProduct.findOne({ nmID });

        if (shopProduct) {
            await showProductManagementMenu(ctx, nmID);
            return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –®–ê–ì 2 (–≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª)
        } else {
            ctx.wizard.state.cardData = card;
            ctx.wizard.state.nmID = nmID;
            await ctx.reply(`–¢–æ–≤–∞—Ä "${card.title}" –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –Ω–µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4990), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã /cancel.`);
            return ctx.wizard.selectStep(3); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –®–ê–ì 3 (—Å–æ–∑–¥–∞–Ω–∏–µ)
        }
    },

    // --- –®–ê–ì 2: –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç ---
    async (ctx) => {
        if (!ctx.message || !ctx.message.text) {
            return;
        }

        const input = ctx.message.text;
        const { action, sku, nmID } = ctx.wizard.state;

        if (action === 'editing_stock') {
            const product = await ShopProduct.findOne({ nmID });
            const sizeToUpdate = product.sizes.find(s => s.sku === sku);
            const currentAmount = sizeToUpdate.amount;
            let newAmount;

            if (input.startsWith('+')) { newAmount = currentAmount + parseInt(input.substring(1), 10); }
            else if (input.startsWith('-')) { newAmount = currentAmount - parseInt(input.substring(1), 10); }
            else { newAmount = parseInt(input, 10); }

            if (!isNaN(newAmount) && newAmount >= 0) {
                await ShopProduct.updateOne({ nmID, "sizes.sku": sku }, { $set: { "sizes.$.amount": newAmount } });
                await ShopCategory.updateOne({ code: ctx.wizard.state.categoryCode }, { $addToSet: { product_nmIDs: nmID } });
                await ctx.reply(`‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${sizeToUpdate.name} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newAmount} —à—Ç.`);
            } else { await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.'); }
        }

        if (action === 'editing_price') {
            const newPrice = parseInt(input, 10);
            if (!isNaN(newPrice) && newPrice > 0) {
                await ShopProduct.updateOne({ nmID }, { $set: { price: newPrice } });
                await ctx.reply(`‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${newPrice} —Ä—É–±.`);
            } else { await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.'); }
        }

        await showProductManagementMenu(ctx, nmID);
        return ctx.wizard.selectStep(2); // –û—Å—Ç–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ
    },

    // --- –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    async (ctx) => {
        if (!ctx.message || !ctx.message.text) { return; }
        if (ctx.message.text === '/cancel') { await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.'); return ctx.scene.leave(); }

        const price = parseInt(ctx.message.text, 10);
        if (isNaN(price) || price <= 0) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel.');
            return;
        }

        const { nmID, cardData } = ctx.wizard.state;
        const sizesForShopProduct = (cardData.sizes || [])
            .filter(size => size && size.techSize && size.skus && size.skus.length > 0)
            .map(size => ({
                sku: size.skus[0],
                name: size.techSize,
                amount: 0
            }));

        try {
            const newProduct = new ShopProduct({ nmID, price, active: true, sizes: sizesForShopProduct });
            await newProduct.save();
            await ShopCategory.updateOne({ code: ctx.wizard.state.categoryCode }, { $addToSet: { product_nmIDs: newProduct.nmID } });
            await ctx.replyWithHTML(`‚úÖ –¢–æ–≤–∞—Ä "<b>${cardData.title}</b>" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π <b>${price}</b> —Ä—É–±.`);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
        }

        return ctx.scene.leave();
    }
);


// ========================================================================
// ===                  –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö (ACTIONS)                    ===
// ========================================================================

manageProductsWizard.action('edit_sizes', async (ctx) => {
    await ctx.answerCbQuery();
    await showSizeManagementMenu(ctx);
});

manageProductsWizard.action(/^toggle_size:(.+):(.+):([01])$/, async (ctx) => {
    await ctx.answerCbQuery();
    const sku = ctx.match[1];
    const sizeName = decodeURIComponent(ctx.match[2]);
    const wasActive = ctx.match[3] === '1';
    const { nmID } = ctx.wizard.state;

    if (wasActive) {
        await ShopProduct.updateOne({ nmID }, { $pull: { sizes: { sku: sku } } });
    } else {
        const newSize = { sku: sku, name: sizeName, amount: 0 };
        await ShopProduct.updateOne({ nmID }, { $push: { sizes: newSize } });
    }
    await showSizeManagementMenu(ctx);
});

manageProductsWizard.action('edit_stock', async (ctx) => {
    await ctx.answerCbQuery();
    const { shopProduct } = ctx.wizard.state;
    if (!shopProduct || shopProduct.sizes.length === 0) {
        await ctx.editMessageText('–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –º–µ–Ω—é "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã".', Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_product_menu')]
        ]));
        return;
    }
    const sizeButtons = shopProduct.sizes.map(size => [Markup.button.callback(`${size.name} (${size.amount} —à—Ç.)`, `select_size_stock:${size.sku}`)]);
    sizeButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_product_menu')]);
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞:', Markup.inlineKeyboard(sizeButtons));
});

manageProductsWizard.action(/^select_size_stock:(.+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const sku = ctx.match[1];
    const { shopProduct } = ctx.wizard.state;
    const size = shopProduct.sizes.find(s => s.sku === sku);

    ctx.wizard.state.action = 'editing_stock';
    ctx.wizard.state.sku = sku;

    await ctx.editMessageText(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ <b>${size.name}</b> (—Å–µ–π—á–∞—Å ${size.amount} —à—Ç.).\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>+N</code>, <code>-N</code>, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <code>N</code>.`, {parse_mode: 'HTML'});
});

manageProductsWizard.action('edit_price', async (ctx) => {
    await ctx.answerCbQuery();
    const { shopProduct } = ctx.wizard.state;
    ctx.wizard.state.action = 'editing_price';
    await ctx.editMessageText(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–µ–∫—É—â–∞—è: ${shopProduct.price} —Ä—É–±.):`);
});

manageProductsWizard.action('back_to_product_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await showProductManagementMenu(ctx, ctx.wizard.state.nmID);
});

manageProductsWizard.action('back_to_list', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.reenter();
});

module.exports = manageProductsWizard;