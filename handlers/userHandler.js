// /handlers/userHandler.js
const { Markup, Input } = require('telegraf');
const bot = require('../bot');
const ShopCategory = require('../models/ShopCategory');
const Cart = require('../models/Cart');

async function showMainMenu(ctx, forceReply = false) {
    const logoPath = './assets/full_logo.png';
    const message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!';
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üóÇ –ö–∞—Ç–∞–ª–æ–≥', 'show_catalog')],
        [Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart')],
        [Markup.button.callback('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'show_info')]
    ]);
    try {
        const photo = Input.fromLocalFile(logoPath);
        if (ctx.callbackQuery && !forceReply) {
            await ctx.editMessageMedia({ type: 'photo', media: photo, caption: message }, keyboard);
        } else {
            await ctx.replyWithPhoto(photo, { caption: message, reply_markup: keyboard.reply_markup });
        }
    } catch (e) {
        if (e.response && e.response.error_code === 400 && e.response.description.includes('message is not modified')) {} else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', e);
        }
    }
}

function registerUserHandlers() {
    bot.start(showMainMenu);

    bot.action('back_to_main_menu', async (ctx) => {
        await ctx.answerCbQuery();
        if (ctx.scene && ctx.scene.current) {
            await ctx.scene.leave();
        }
        try {
            await ctx.deleteMessage();
        } catch (e) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.", e.message);
        }
        await showMainMenu(ctx, true);
    });

    bot.action('show_catalog', async (ctx) => {
        await ctx.answerCbQuery();
        const categories = await ShopCategory.find({});
        const buttons = categories.map(cat => [Markup.button.callback(cat.name, `select_category:${cat.code}`)]);

        // ========================================================================
        // ===              –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ö–æ—Ä–∑–∏–Ω—ã —Å—é–¥–∞         ===
        // ========================================================================
        // –¢–µ–ø–µ—Ä—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏: –ö–æ—Ä–∑–∏–Ω–∞ –∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.push([
            Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'),
            Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
        ]);
        // ========================================================================

        const keyboard = Markup.inlineKeyboard(buttons);
        await ctx.editMessageCaption('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', keyboard);
    });

    bot.action(/^select_category:(.+)$/, async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.deleteMessage();
        const categoryCode = ctx.match[1];
        await ctx.scene.enter('BROWSE_PRODUCTS_SCENE', { categoryCode: categoryCode });
    });

    bot.action(/^add_to_cart:(\d+)$/, async (ctx) => {
        const nmID = parseInt(ctx.match[1], 10);
        const telegramId = ctx.from.id;
        try {
            let cart = await Cart.findOne({ telegramId });
            if (!cart) {
                cart = new Cart({ telegramId, items: [] });
            }
            const itemIndex = cart.items.findIndex(item => item.nmID === nmID);
            if (itemIndex > -1) {
                cart.items[itemIndex].quantity += 1;
            } else {
                cart.items.push({ nmID, quantity: 1 });
            }
            await cart.save();
            await ctx.answerCbQuery('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            await ctx.answerCbQuery('‚ùóÔ∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    });

    bot.action('view_cart', async (ctx) => {
        await ctx.answerCbQuery();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ —Å—Ü–µ–Ω–µ –∫–æ—Ä–∑–∏–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if (ctx.scene?.current?.id !== 'CART_SCENE') {
            await ctx.deleteMessage();
            await ctx.scene.enter('CART_SCENE');
        }
    });
}

module.exports = { registerUserHandlers, showMainMenu };
