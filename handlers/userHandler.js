// /handlers/userHandler.js
const { Markup, Input } = require('telegraf');
const bot = require('../bot');
const ShopCategory = require('../models/ShopCategory');
const { showCart } = require('../scenes/cartScene'); // <-- –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é

async function showMainMenu(ctx, forceReply = false) {
    const logoPath = './assets/full_logo.png';
    const message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!';
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üóÇ –ö–∞—Ç–∞–ª–æ–≥', 'show_catalog')],
        [Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart')],
        [Markup.button.callback('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'show_info')]
    ]);
    try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ª—é–±–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if (ctx.scene?.current) {
            await ctx.scene.leave();
        }

        const photo = Input.fromLocalFile(logoPath);
        if (ctx.callbackQuery && !forceReply) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            await ctx.editMessageMedia({ type: 'photo', media: photo, caption: message }, keyboard);
        } else {
            // –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
            if (ctx.callbackQuery) { // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∫–æ–ª–±—ç–∫, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.deleteMessage().catch(() => {});
            }
            await ctx.replyWithPhoto(photo, { caption: message, reply_markup: keyboard.reply_markup });
        }
    } catch (e) {
        if (e.response && e.response.error_code === 400 && (e.response.description.includes('message is not modified') || e.response.description.includes('message to edit not found'))) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', e);
        }
    }
}

function registerUserHandlers() {
    // bot.start —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ index.js
    // bot.start(showMainMenu); // <--- –≠–¢–£ –°–¢–†–û–ö–£ –ú–û–ñ–ù–û –£–î–ê–õ–ò–¢–¨ –ò–õ–ò –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨

    bot.action('back_to_main_menu', async (ctx) => {
        try {
            await ctx.answerCbQuery();
            await showMainMenu(ctx, true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –≤ back_to_main_menu:", e);
        }
    });

    bot.action('show_catalog', async (ctx) => {
        try {
            await ctx.answerCbQuery();
            // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const categories = await ShopCategory.find({ parent: null });
            if (categories.length === 0) {
                await ctx.editMessageCaption('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', Markup.inlineKeyboard([
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]
                ]));
                return;
            }
            const buttons = categories.map(cat => [Markup.button.callback(cat.name, `select_category:${cat.code}`)]);

            buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);

            const keyboard = Markup.inlineKeyboard(buttons);
            // –ú–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏
            await ctx.editMessageCaption('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', keyboard);
        } catch(e) {
            console.error("–û—à–∏–±–∫–∞ –≤ show_catalog:", e);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    bot.action(/^select_category:(.+)$/, async (ctx) => {
        try {
            await ctx.answerCbQuery();
            await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ
            const categoryCode = ctx.match[1];
            // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π –∫–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await ctx.scene.enter('BROWSE_PRODUCTS_SCENE', { categoryCode: categoryCode });
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –≤ select_category:", e);
        }
    });

    bot.action('view_cart', async (ctx) => {
        try {
            await ctx.deleteMessage();
        } catch (e) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.", e.message);
        }
        await showCart(ctx, true);
    });

    bot.action('show_info', async (ctx) => {
        try {
            await ctx.answerCbQuery();

            const infoMessage = `<b>–û –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n
–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–∑–∞–º, –∞–∫—Ü–∏—è–º, –æ–±–º–µ–Ω—É, –≥–∞—Ä–∞–Ω—Ç–∏–∏, –≤–æ–∑–≤—Ä–∞—Ç—É, –±—Ä–∞–∫—É –∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: shop@n208.ru, –º—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ –ø–∏—Å—å–º–∞!\n\n
–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏, –∞ —Ç–∞–∫ –∂–µ –ø–∏—à–∏—Ç–µ –ª—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É: shop@n208.ru.\n
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª: n208shop`;
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]
            ]);
            await ctx.editMessageCaption(infoMessage, { parse_mode: 'HTML', reply_markup: keyboard.reply_markup });
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –≤ show_info:", e);
        }
    });
}

module.exports = { registerUserHandlers, showMainMenu };



// // /handlers/userHandler.js
// const { Markup, Input } = require('telegraf');
// const bot = require('../bot');
// const ShopCategory = require('../models/ShopCategory');
//
// async function showMainMenu(ctx, forceReply = false) {
//     const logoPath = './assets/full_logo.png';
//     const message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!';
//     const keyboard = Markup.inlineKeyboard([
//         [Markup.button.callback('üóÇ –ö–∞—Ç–∞–ª–æ–≥', 'show_catalog')],
//         [Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart')],
//         [Markup.button.callback('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'show_info')]
//     ]);
//     try {
//         const photo = Input.fromLocalFile(logoPath);
//         if (ctx.callbackQuery && !forceReply) {
//             await ctx.editMessageMedia({ type: 'photo', media: photo, caption: message }, keyboard);
//         } else {
//             await ctx.replyWithPhoto(photo, { caption: message, reply_markup: keyboard.reply_markup });
//         }
//     } catch (e) {
//         if (e.response && e.response.error_code === 400 && e.response.description.includes('message is not modified')) {} else {
//             console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', e);
//         }
//     }
// }
//
// function registerUserHandlers() {
//     bot.start(showMainMenu);
//
//     bot.action('back_to_main_menu', async (ctx) => {
//         await ctx.answerCbQuery();
//         if (ctx.scene && ctx.scene.current) {
//             await ctx.scene.leave();
//         }
//         try {
//             await ctx.deleteMessage();
//         } catch (e) {
//             console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.", e.message);
//         }
//         await showMainMenu(ctx, true);
//     });
//
//     bot.action('show_catalog', async (ctx) => {
//         await ctx.answerCbQuery();
//         const categories = await ShopCategory.find({});
//         const buttons = categories.map(cat => [Markup.button.callback(cat.name, `select_category:${cat.code}`)]);
//
//         buttons.push([
//             Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'),
//             Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
//         ]);
//
//         const keyboard = Markup.inlineKeyboard(buttons);
//         await ctx.editMessageCaption('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', keyboard);
//     });
//
//     bot.action(/^select_category:(.+)$/, async (ctx) => {
//         await ctx.answerCbQuery();
//         await ctx.deleteMessage();
//         const categoryCode = ctx.match[1];
//         await ctx.scene.enter('BROWSE_PRODUCTS_SCENE', { categoryCode: categoryCode });
//     });
//
//     bot.action('view_cart', async (ctx) => {
//         await ctx.answerCbQuery();
//         if (ctx.scene?.current?.id !== 'CART_SCENE') {
//             if (ctx.scene?.current) {
//                 await ctx.scene.leave();
//             }
//             await ctx.deleteMessage().catch(()=>{});
//             await ctx.scene.enter('CART_SCENE');
//         }
//     });
// }
//
// module.exports = { registerUserHandlers, showMainMenu };
