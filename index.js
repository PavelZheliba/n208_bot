// index.js
require('dotenv').config();
const mongoose = require('mongoose');
const { Scenes, session } = require('telegraf');
const bot = require('./bot');

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
const { registerUserHandlers, showMainMenu } = require('./handlers/userHandler');
const { registerAdminHandlers } = require('./handlers/adminHandler');

// –ò–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω –∏ –≤–∏–∑–∞—Ä–¥–æ–≤
const { adminScene } = require('./scenes/adminScenes');
const { browseProductsScene } = require('./scenes/userScenes');
const { showCart, cartScene } = require('./scenes/cartScene');
const addProductWizard = require('./wizards/addProductWizard');
const addCategoryWizard = require('./wizards/addCategoryWizard');
const removeCategoryWizard = require('./wizards/removeCategoryWizard');
const manageProductsWizard = require('./wizards/manageProductsWizard');

async function start() {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');

        const stage = new Scenes.Stage([
            adminScene,
            browseProductsScene,
            cartScene,
            addProductWizard,
            addCategoryWizard,
            removeCategoryWizard,
            manageProductsWizard,
        ]);

        bot.use(session());
        bot.use(stage.middleware());

        bot.command('start', showMainMenu);
        bot.command('cart', (ctx) => showCart(ctx, true));

        bot.command('contacts', async (ctx) => {
            const contactMessage =
                ` <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n` +
                `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–ª–∏—á–∏—é –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n\n` +
                `‚ñ™Ô∏è <b>üìß Email:</b> shop@n208.ru\n\n` +
                `‚ñ™Ô∏è <b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>+7 (936) 208-208-2</code>\n` +
                `‚ñ™Ô∏è <b>üöÄ Telegram –º–∞–≥–∞–∑–∏–Ω–∞:</b> <a href="https://t.me/n208shop">@shop</a>\n` +
                `–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 20:00 –ø–æ –ò–∂–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.`;
            await ctx.replyWithHTML(contactMessage);
        });


        // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "üóÇ –ö–∞—Ç–∞–ª–æ–≥" –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        // bot.action('show_catalog', (ctx) => {
        //     // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        //     if (ctx.scene) {
        //         ctx.scene.leave();
        //     }
        //     return ctx.scene.enter('BROWSE_PRODUCTS_SCENE');
        // });

        // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "üõí –ö–æ—Ä–∑–∏–Ω–∞" –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã
        // bot.action('view_cart', showCart);
        // bot.action('view_cart', async (ctx) => {
        //     try {
        //         await ctx.deleteMessage();
        //     } catch (e) {
        //         console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", e.message);
        //     }
        //     return showCart(ctx, true);
        // });


        // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã
        // bot.action('show_info', async (ctx) => {
        //     await ctx.answerCbQuery();
        //     const infoMessage = `<b>–û –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, —É—Å–ª–æ–≤–∏—è—Ö –¥–æ—Å—Ç–∞–≤–∫–∏, –æ–ø–ª–∞—Ç—ã –∏ —Ç.–¥.`;
        //     await ctx.replyWithHTML(infoMessage);
        // });

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        registerUserHandlers();
        registerAdminHandlers();

        bot.launch();
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

        process.once('SIGINT', () => bot.stop('SIGINT'));
        process.once('SIGTERM', () => bot.stop('SIGTERM'));

    } catch (e) {
        console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï:', e);
    }
}

start();





// // index.js
// require('dotenv').config();
// const mongoose = require('mongoose');
// const { Markup } = require('telegraf');
// const { Scenes, session } = require('telegraf');
// const bot = require('./bot');
// const { registerUserHandlers } = require('./handlers/userHandler');
// const { registerAdminHandlers } = require('./handlers/adminHandler');
//
// // –ò–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω –∏ –≤–∏–∑–∞—Ä–¥–æ–≤
// const { adminScene } = require('./scenes/adminScenes');
// const { browseProductsScene } = require('./scenes/userScenes');
// const { showCart, cartScene } = require('./scenes/cartScene');
// const addProductWizard = require('./wizards/addProductWizard');
// const addCategoryWizard = require('./wizards/addCategoryWizard');
// const removeCategoryWizard = require('./wizards/removeCategoryWizard');
// const manageProductsWizard = require('./wizards/manageProductsWizard');
//
// async function start() {
//     try {
//         await mongoose.connect(process.env.MONGO_URI, {
//             useNewUrlParser: true,
//             useUnifiedTopology: true,
//         });
//         console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
//
//         // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω –∏ –≤–∏–∑–∞—Ä–¥–æ–≤
//         const stage = new Scenes.Stage([
//             adminScene,
//             browseProductsScene,
//             cartScene,
//             addProductWizard,
//             addCategoryWizard,
//             removeCategoryWizard,
//             manageProductsWizard,
//         ]);
//
//         bot.use(session());
//         bot.use(stage.middleware());
//
//
//         bot.command('start', async (ctx) => {
//
//
//             await ctx.reply(
//                 '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:',
//                 Markup.keyboard([
//                     ['–ö–∞—Ç–∞–ª–æ–≥ üõçÔ∏è'], // –ö–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
//                     ['–ö–æ—Ä–∑–∏–Ω–∞ üõí', '–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû'] // –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
//                 ]).resize() // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
//             );
//         });
//
//         bot.hears('–ö–∞—Ç–∞–ª–æ–≥ üõçÔ∏è', (ctx) => {
//             return ctx.scene.enter('BROWSE_PRODUCTS_SCENE');
//         });
//
//         // bot.command('start', (ctx) => {
//         //     return ctx.scene.enter('BROWSE_PRODUCTS_SCENE');
//         // });
//         //
//
//
//         bot.command('cart', showCart);
//
//         bot.command('contacts', async (ctx) => {
//             const contactMessage =
//                 ` <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n` +
//                 `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–ª–∏—á–∏—é –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n\n` +
//                 `‚ñ™Ô∏è <b>üìß Email:</b> shop@n208.ru\n\n` +
//                 `‚ñ™Ô∏è <b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>+7 (936) 208-208-2</code>\n` +
//                 `‚ñ™Ô∏è <b>üöÄ Telegram –º–∞–≥–∞–∑–∏–Ω–∞:</b> <a href="https://t.me/n208shop">@shop</a>\n` +
//                 `–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 20:00 –ø–æ –ò–∂–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.`;
//             await ctx.replyWithHTML(contactMessage);
//         });
//
//         // ===============================================================
//
//         // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
//         registerUserHandlers();
//         registerAdminHandlers();
//
//         bot.launch();
//         console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
//
//         process.once('SIGINT', () => bot.stop('SIGINT'));
//         process.once('SIGTERM', () => bot.stop('SIGTERM'));
//
//     } catch (e) {
//         console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï:', e);
//     }
// }
//
// start();
//
//
//
// // // index.js
// // require('dotenv').config();
// // const mongoose = require('mongoose');
// // const { Scenes, session } = require('telegraf');
// // const bot = require('./bot');
// // const { registerUserHandlers } = require('./handlers/userHandler');
// // const { registerAdminHandlers } = require('./handlers/adminHandler');
// //
// // // –ò–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω –∏ –≤–∏–∑–∞—Ä–¥–æ–≤
// // const { adminScene } = require('./scenes/adminScenes');
// // const { browseProductsScene } = require('./scenes/userScenes');
// // const { showCart, cartScene } = require('./scenes/cartScene');
// // const addProductWizard = require('./wizards/addProductWizard');
// // const addCategoryWizard = require('./wizards/addCategoryWizard');
// // const removeCategoryWizard = require('./wizards/removeCategoryWizard');
// // const manageProductsWizard = require('./wizards/manageProductsWizard');
// //
// // async function start() {
// //     try {
// //         await mongoose.connect(process.env.MONGO_URI, {
// //             useNewUrlParser: true,
// //             useUnifiedTopology: true,
// //         });
// //         console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
// //
// //         // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω –∏ –≤–∏–∑–∞—Ä–¥–æ–≤
// //         const stage = new Scenes.Stage([
// //             adminScene,
// //             browseProductsScene,
// //             cartScene,
// //             addProductWizard,
// //             addCategoryWizard,
// //             removeCategoryWizard,
// //             manageProductsWizard,
// //         ]);
// //
// //         bot.use(session());
// //         bot.use(stage.middleware());
// //
// //         registerUserHandlers();
// //         registerAdminHandlers();
// //
// //         bot.launch();
// //         console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
// //
// //         process.once('SIGINT', () => bot.stop('SIGINT'));
// //         process.once('SIGTERM', () => bot.stop('SIGTERM'));
// //
// //     } catch (e) {
// //         console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï:', e);
// //     }
// // }
// //
// // start();
