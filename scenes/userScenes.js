// /scenes/userScenes.js
const { Scenes, Markup } = require('telegraf');
const sharp = require('sharp');
const axios = require('axios');
const Cards = require('../models/Cards');
const ShopProduct = require('../models/ShopProduct');
const ShopCategory = require('../models/ShopCategory');

const PAGE_SIZE = 6;
const GRID_IMAGE_SIZE = 500;

// ========================================================================
// ===                   –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –§—É–Ω–∫—Ü–∏—è-—É–±–æ—Ä—â–∏–∫                  ===
// ========================================================================
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, ID –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ state
async function cleanupGridMessages(ctx) {
    if (ctx.scene.state.messagesToDelete && ctx.scene.state.messagesToDelete.length > 0) {
        // Promise.all –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        // .catch() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        await Promise.all(
            ctx.scene.state.messagesToDelete.map(msgId => ctx.deleteMessage(msgId).catch(() => {}))
        );
    }
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ctx.scene.state.messagesToDelete = [];
}


async function generateNumberedImage(imageUrl, number) {
    try {
        const response = await axios({ url: imageUrl, responseType: 'arraybuffer' });
        const imageBuffer = Buffer.from(response.data, 'binary');
        const svg = `<svg width="100" height="100"><circle cx="50" cy="50" r="40" fill="rgba(0,0,0,0.6)" /><text x="50%" y="50%" text-anchor="middle" dy=".3em" font-size="40" font-family="Arial, sans-serif" fill="white">${number}</text></svg>`;
        return sharp(imageBuffer).resize(GRID_IMAGE_SIZE, GRID_IMAGE_SIZE, { fit: sharp.fit.cover, position: 'attention' }).composite([{ input: Buffer.from(svg), gravity: 'northwest' }]).jpeg({ quality: 90 }).toBuffer();
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${imageUrl}:`, error);
        const fallbackSvg = `<svg width="${GRID_IMAGE_SIZE}" height="${GRID_IMAGE_SIZE}"><text x="50%" y="50%" text-anchor="middle" dy=".3em" font-size="40">Error</text></svg>`;
        return sharp(Buffer.from(fallbackSvg)).png().toBuffer();
    }
}

async function showProductGrid(ctx, categoryCode, page = 1) {
    // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –í—ã–∑—ã–≤–∞–µ–º —É–±–æ—Ä—â–∏–∫–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ===
    await cleanupGridMessages(ctx);

    const loadingMessage = await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã...');
    const category = await ShopCategory.findOne({ code: categoryCode });
    if (!category) {
        await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
    }

    const availableProducts = await ShopProduct.find({ nmID: { $in: category.product_nmIDs } });
    const availableNmIDs = availableProducts.map(p => p.nmID);
    const totalProducts = availableNmIDs.length;
    const productsOnPage = await Cards.find({ nmID: { $in: availableNmIDs } }).skip((page - 1) * PAGE_SIZE).limit(PAGE_SIZE);

    if (productsOnPage.length === 0) {
        const keyboard = Markup.inlineKeyboard([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);
        await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.', { reply_markup: keyboard.reply_markup });
        // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ3: –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º ===
        ctx.scene.state.messagesToDelete = [loadingMessage.message_id];
        return;
    }

    const mediaGroupPromises = productsOnPage.map((product, index) => {
        const imageUrl = (product.photos && product.photos.length > 0) ? product.photos[0].big : 'https://via.placeholder.com/500';
        const number = (page - 1) * PAGE_SIZE + (index + 1);
        return generateNumberedImage(imageUrl, number).then(buffer => ({ type: 'photo', media: { source: buffer } }));
    });
    const mediaGroup = await Promise.all(mediaGroupPromises);
    ctx.scene.state.currentPageMap = new Map(productsOnPage.map((p, i) => [String((page - 1) * PAGE_SIZE + (i + 1)), p.nmID]));
    const numberButtons = productsOnPage.map((_, index) => Markup.button.callback(String((page - 1) * PAGE_SIZE + (index + 1)), `select_product:${(page - 1) * PAGE_SIZE + (index + 1)}`));

    const hasMore = totalProducts > page * PAGE_SIZE;
    const hasPrevious = page > 1;
    const controlButtons = [];
    if (hasPrevious) controlButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_prev:${categoryCode}:${page - 1}`));
    controlButtons.push(Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'));
    controlButtons.push(Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu'));
    if (hasMore) controlButtons.push(Markup.button.callback('–î–∞–ª–µ–µ ‚û°Ô∏è', `show_more:${categoryCode}:${page + 1}`));

    const keyboard = Markup.inlineKeyboard([numberButtons, controlButtons]);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é..."
    await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const mediaGroupMessages = await ctx.replyWithMediaGroup(mediaGroup);
    const choiceMessage = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É:', keyboard);

    // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ4: –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ state ===
    ctx.scene.state.messagesToDelete = [
        ...mediaGroupMessages.map(m => m.message_id), // –í—Å–µ ID –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        choiceMessage.message_id                     // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    ];
}

async function showFullProductCard(ctx, nmID) {
    // –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Ç–æ–∂–µ —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—É—é —Å–µ—Ç–∫—É
    await cleanupGridMessages(ctx);
    try {
        const card = await Cards.findOne({ nmID });
        const shopProduct = await ShopProduct.findOne({ nmID });
        if (!card || !shopProduct) {
            await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        let sentMessages = [];
        if (card.photos && card.photos.length > 0) {
            const mediaGroup = card.photos.slice(0, 10).map(photo => ({ type: 'photo', media: photo.big }));
            const mediaMessages = await ctx.replyWithMediaGroup(mediaGroup);
            sentMessages.push(...mediaMessages.map(m => m.message_id));
        }
        const caption = `<b>–∞—Ä—Ç. ${card.nmID}</b>,\n<b>${card.title}</b>\n\n${card.description || ''}\n\n<b>–¶–µ–Ω–∞: ${shopProduct.price} —Ä—É–±.</b>`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', 'back_to_grid'),
                Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'),
                Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
            ],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', `add_to_cart:${nmID}`)],
        ]);
        const captionMessage = await ctx.replyWithHTML(caption, keyboard);
        sentMessages.push(captionMessage.message_id);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–∂–µ
        ctx.scene.state.messagesToDelete = sentMessages;

    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞ ${nmID}:`, e);
    }
}

const browseProductsScene = new Scenes.BaseScene('BROWSE_PRODUCTS_SCENE');

browseProductsScene.enter(async (ctx) => {
    await showProductGrid(ctx, ctx.scene.state.categoryCode, 1);
});

// === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ5: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã ===
// –û–Ω –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ —É–±–æ—Ä—â–∏–∫–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –º—ã –ø–æ–∫–∏–¥–∞–µ–º —Å—Ü–µ–Ω—É
browseProductsScene.leave(cleanupGridMessages);


browseProductsScene.action(/^show_prev:(.+):(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    await showProductGrid(ctx, ctx.match[1], parseInt(ctx.match[2], 10));
});

browseProductsScene.action(/^show_more:(.+):(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    await showProductGrid(ctx, ctx.match[1], parseInt(ctx.match[2], 10));
});

browseProductsScene.action(/^select_product:(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const selectedNumber = ctx.match[1];
    const nmID = ctx.scene.state.currentPageMap.get(selectedNumber);
    if (selectedNumber) {
        ctx.scene.state.returnPage = Math.ceil(parseInt(selectedNumber, 10) / PAGE_SIZE);
    }
    if (nmID) {
        ctx.scene.state.selectedNmID = nmID;
        await showFullProductCard(ctx, nmID);
    }
});

browseProductsScene.action('back_to_grid', async (ctx) => {
    await ctx.answerCbQuery();
    const pageToGoBack = ctx.scene.state.returnPage || 1;
    await showProductGrid(ctx, ctx.scene.state.categoryCode, pageToGoBack);
});

module.exports = { browseProductsScene };



// // /scenes/userScenes.js
// const { Scenes, Markup } = require('telegraf');
// const sharp = require('sharp');
// const axios = require('axios');
// const Cards = require('../models/Cards');
// const ShopProduct = require('../models/ShopProduct');
// const ShopCategory = require('../models/ShopCategory');
//
// const PAGE_SIZE = 6;
// const GRID_IMAGE_SIZE = 500;
//
// async function generateNumberedImage(imageUrl, number) {
//     try {
//         const response = await axios({ url: imageUrl, responseType: 'arraybuffer' });
//         const imageBuffer = Buffer.from(response.data, 'binary');
//         const svg = `<svg width="100" height="100"><circle cx="50" cy="50" r="40" fill="rgba(0,0,0,0.6)" /><text x="50%" y="50%" text-anchor="middle" dy=".3em" font-size="40" font-family="Arial, sans-serif" fill="white">${number}</text></svg>`;
//         return sharp(imageBuffer).resize(GRID_IMAGE_SIZE, GRID_IMAGE_SIZE, { fit: sharp.fit.cover, position: 'attention' }).composite([{ input: Buffer.from(svg), gravity: 'northwest' }]).jpeg({ quality: 90 }).toBuffer();
//     } catch (error) {
//         console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${imageUrl}:`, error);
//         const fallbackSvg = `<svg width="${GRID_IMAGE_SIZE}" height="${GRID_IMAGE_SIZE}"><text x="50%" y="50%" text-anchor="middle" dy=".3em" font-size="40">Error</text></svg>`;
//         return sharp(Buffer.from(fallbackSvg)).png().toBuffer();
//     }
// }
//
// async function showProductGrid(ctx, categoryCode, page = 1) {
//     const loadingMessage = await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã...');
//     const category = await ShopCategory.findOne({ code: categoryCode });
//     if (!category) {
//         await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
//         return;
//     }
//
//     const availableProducts = await ShopProduct.find({ nmID: { $in: category.product_nmIDs } });
//     const availableNmIDs = availableProducts.map(p => p.nmID);
//     const totalProducts = availableNmIDs.length;
//     const productsOnPage = await Cards.find({ nmID: { $in: availableNmIDs } }).skip((page - 1) * PAGE_SIZE).limit(PAGE_SIZE);
//
//     // ========================================================================
//     // ===                 –í–û–¢ –ó–î–ï–°–¨ –í–ù–û–°–ò–ú –ò–ó–ú–ï–ù–ï–ù–ò–ï                      ===
//     // ========================================================================
//     if (productsOnPage.length === 0) {
//         // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
//         const keyboard = Markup.inlineKeyboard([
//             Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
//         ]);
//         // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é...", –º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –ò –¥–æ–±–∞–≤–ª—è—è –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫—É
//         await ctx.telegram.editMessageText(
//             ctx.chat.id,
//             loadingMessage.message_id,
//             undefined,
//             '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.',
//             { reply_markup: keyboard.reply_markup }
//         );
//         return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
//     }
//     // ========================================================================
//
//     const mediaGroupPromises = productsOnPage.map((product, index) => {
//         const imageUrl = (product.photos && product.photos.length > 0) ? product.photos[0].big : 'https://via.placeholder.com/500';
//         const number = (page - 1) * PAGE_SIZE + (index + 1);
//         return generateNumberedImage(imageUrl, number).then(buffer => ({ type: 'photo', media: { source: buffer } }));
//     });
//     const mediaGroup = await Promise.all(mediaGroupPromises);
//     ctx.scene.state.currentPageMap = new Map(productsOnPage.map((p, i) => [String((page - 1) * PAGE_SIZE + (i + 1)), p.nmID]));
//     const numberButtons = productsOnPage.map((_, index) => Markup.button.callback(String((page - 1) * PAGE_SIZE + (index + 1)), `select_product:${(page - 1) * PAGE_SIZE + (index + 1)}`));
//
//     const hasMore = totalProducts > page * PAGE_SIZE;
//     const hasPrevious = page > 1;
//     const controlButtons = [];
//     if (hasPrevious) controlButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_prev:${categoryCode}:${page - 1}`));
//
//     controlButtons.push(Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'));
//     controlButtons.push(Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu'));
//
//     if (hasMore) controlButtons.push(Markup.button.callback('–î–∞–ª–µ–µ ‚û°Ô∏è', `show_more:${categoryCode}:${page + 1}`));
//
//     const keyboard = Markup.inlineKeyboard([numberButtons, controlButtons]);
//
//     await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
//     await ctx.replyWithMediaGroup(mediaGroup);
//     await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É:', keyboard);
// }
//
// async function showFullProductCard(ctx, nmID) {
//     try {
//         const card = await Cards.findOne({ nmID });
//         const shopProduct = await ShopProduct.findOne({ nmID });
//         if (!card || !shopProduct) {
//             await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
//             return;
//         }
//         if (card.photos && card.photos.length > 0) {
//             const mediaGroup = card.photos.slice(0, 10).map(photo => ({ type: 'photo', media: photo.big }));
//             await ctx.replyWithMediaGroup(mediaGroup);
//         }
//         const caption = `<b>–∞—Ä—Ç. ${card.nmID}</b>,\n<b>${card.title}</b>\n\n${card.description || ''}\n\n<b>–¶–µ–Ω–∞: ${shopProduct.price} —Ä—É–±.</b>`;
//
//         const keyboard = Markup.inlineKeyboard([
//             [
//                 Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', 'back_to_grid'),
//                 Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'),
//                 Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
//             ],
//             [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', `add_to_cart:${nmID}`)],
//         ]);
//
//         await ctx.replyWithHTML(caption, keyboard);
//     } catch (e) {
//         console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞ ${nmID}:`, e);
//     }
// }
//
// const browseProductsScene = new Scenes.BaseScene('BROWSE_PRODUCTS_SCENE');
//
// browseProductsScene.enter(async (ctx) => {
//     await showProductGrid(ctx, ctx.scene.state.categoryCode, 1);
// });
//
// browseProductsScene.action(/^show_prev:(.+):(\d+)$/, async (ctx) => {
//     await ctx.answerCbQuery();
//     const categoryCode = ctx.match[1];
//     const page = parseInt(ctx.match[2], 10);
//     await showProductGrid(ctx, categoryCode, page);
// });
//
// browseProductsScene.action(/^show_more:(.+):(\d+)$/, async (ctx) => {
//     await ctx.answerCbQuery();
//     const categoryCode = ctx.match[1];
//     const page = parseInt(ctx.match[2], 10);
//     await showProductGrid(ctx, categoryCode, page);
// });
//
// browseProductsScene.action(/^select_product:(\d+)$/, async (ctx) => {
//     await ctx.answerCbQuery();
//     const selectedNumber = ctx.match[1];
//     const nmID = ctx.scene.state.currentPageMap.get(selectedNumber);
//     if (selectedNumber) {
//         ctx.scene.state.returnPage = Math.ceil(parseInt(selectedNumber, 10) / PAGE_SIZE);
//     }
//     if (nmID) {
//         ctx.scene.state.selectedNmID = nmID;
//         await showFullProductCard(ctx, nmID);
//     }
// });
//
// browseProductsScene.action('back_to_grid', async (ctx) => {
//     await ctx.answerCbQuery();
//     const pageToGoBack = ctx.scene.state.returnPage || 1;
//     await showProductGrid(ctx, ctx.scene.state.categoryCode, pageToGoBack);
// });
//
// browseProductsScene.command('menu', async (ctx) => {
//     await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
//     return ctx.scene.leave();
// });
//
// module.exports = { browseProductsScene };
//
//
// // // /scenes/userScenes.js
// // const { Scenes, Markup } = require('telegraf');
// // const sharp = require('sharp');
// // const axios = require('axios');
// // const Cards = require('../models/Cards');
// // const ShopProduct = require('../models/ShopProduct');
// // const ShopCategory = require('../models/ShopCategory');
// //
// // const PAGE_SIZE = 6;
// // const GRID_IMAGE_SIZE = 500;
// //
// // async function generateNumberedImage(imageUrl, number) {
// //     try {
// //         const response = await axios({ url: imageUrl, responseType: 'arraybuffer' });
// //         const imageBuffer = Buffer.from(response.data, 'binary');
// //         const svg = `<svg width="100" height="100"><circle cx="50" cy="50" r="40" fill="rgba(0,0,0,0.6)" /><text x="50%" y="50%" text-anchor="middle" dy=".3em" font-size="40" font-family="Arial, sans-serif" fill="white">${number}</text></svg>`;
// //         return sharp(imageBuffer).resize(GRID_IMAGE_SIZE, GRID_IMAGE_SIZE, { fit: sharp.fit.cover, position: 'attention' }).composite([{ input: Buffer.from(svg), gravity: 'northwest' }]).jpeg({ quality: 90 }).toBuffer();
// //     } catch (error) {
// //         console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${imageUrl}:`, error);
// //         const fallbackSvg = `<svg width="${GRID_IMAGE_SIZE}" height="${GRID_IMAGE_SIZE}"><text x="50%" y="50%" text-anchor="middle" dy=".3em" font-size="40">Error</text></svg>`;
// //         return sharp(Buffer.from(fallbackSvg)).png().toBuffer();
// //     }
// // }
// //
// // async function showProductGrid(ctx, categoryCode, page = 1) {
// //     const loadingMessage = await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã...');
// //     const category = await ShopCategory.findOne({ code: categoryCode });
// //     if (!category) {
// //         await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
// //         return;
// //     }
// //
// //     const availableProducts = await ShopProduct.find({ nmID: { $in: category.product_nmIDs } });
// //     const availableNmIDs = availableProducts.map(p => p.nmID);
// //     const totalProducts = availableNmIDs.length;
// //     const productsOnPage = await Cards.find({ nmID: { $in: availableNmIDs } }).skip((page - 1) * PAGE_SIZE).limit(PAGE_SIZE);
// //
// //     if (productsOnPage.length === 0) {
// //         await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.');
// //         return;
// //     }
// //
// //     const mediaGroupPromises = productsOnPage.map((product, index) => {
// //         const imageUrl = (product.photos && product.photos.length > 0) ? product.photos[0].big : 'https://via.placeholder.com/500';
// //         const number = (page - 1) * PAGE_SIZE + (index + 1);
// //         return generateNumberedImage(imageUrl, number).then(buffer => ({ type: 'photo', media: { source: buffer } }));
// //     });
// //     const mediaGroup = await Promise.all(mediaGroupPromises);
// //     ctx.scene.state.currentPageMap = new Map(productsOnPage.map((p, i) => [String((page - 1) * PAGE_SIZE + (i + 1)), p.nmID]));
// //     const numberButtons = productsOnPage.map((_, index) => Markup.button.callback(String((page - 1) * PAGE_SIZE + (index + 1)), `select_product:${(page - 1) * PAGE_SIZE + (index + 1)}`));
// //
// //     const hasMore = totalProducts > page * PAGE_SIZE;
// //     const hasPrevious = page > 1;
// //     const controlButtons = [];
// //     if (hasPrevious) controlButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_prev:${categoryCode}:${page - 1}`));
// //
// //     // ========================================================================
// //     // ===              –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ö–æ—Ä–∑–∏–Ω—ã —Å—é–¥–∞         ===
// //     // ========================================================================
// //     controlButtons.push(Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'));
// //     controlButtons.push(Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu'));
// //     // ========================================================================
// //
// //     if (hasMore) controlButtons.push(Markup.button.callback('–î–∞–ª–µ–µ ‚û°Ô∏è', `show_more:${categoryCode}:${page + 1}`));
// //
// //     const keyboard = Markup.inlineKeyboard([numberButtons, controlButtons]);
// //
// //     await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
// //     await ctx.replyWithMediaGroup(mediaGroup);
// //     await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É:', keyboard);
// // }
// //
// // async function showFullProductCard(ctx, nmID) {
// //     try {
// //         const card = await Cards.findOne({ nmID });
// //         const shopProduct = await ShopProduct.findOne({ nmID });
// //         if (!card || !shopProduct) {
// //             await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
// //             return;
// //         }
// //         if (card.photos && card.photos.length > 0) {
// //             const mediaGroup = card.photos.slice(0, 10).map(photo => ({ type: 'photo', media: photo.big }));
// //             await ctx.replyWithMediaGroup(mediaGroup);
// //         }
// //         const caption = `<b>–∞—Ä—Ç. ${card.nmID}</b>,\n<b>${card.title}</b>\n\n${card.description || ''}\n\n<b>–¶–µ–Ω–∞: ${shopProduct.price} —Ä—É–±.</b>`;
// //
// //         // ========================================================================
// //         // ===              –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ3: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ö–æ—Ä–∑–∏–Ω—ã —Å—é–¥–∞         ===
// //         // ========================================================================
// //         const keyboard = Markup.inlineKeyboard([
// //             [
// //                 Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', 'back_to_grid'),
// //                 Markup.button.callback('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'view_cart'),
// //                 Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
// //             ],
// //             [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', `add_to_cart:${nmID}`)],
// //         ]);
// //         // ========================================================================
// //
// //         await ctx.replyWithHTML(caption, keyboard);
// //     } catch (e) {
// //         console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞ ${nmID}:`, e);
// //     }
// // }
// //
// // const browseProductsScene = new Scenes.BaseScene('BROWSE_PRODUCTS_SCENE');
// //
// // browseProductsScene.enter(async (ctx) => {
// //     await showProductGrid(ctx, ctx.scene.state.categoryCode, 1);
// // });
// //
// // browseProductsScene.action(/^show_prev:(.+):(\d+)$/, async (ctx) => {
// //     await ctx.answerCbQuery();
// //     const categoryCode = ctx.match[1];
// //     const page = parseInt(ctx.match[2], 10);
// //     await showProductGrid(ctx, categoryCode, page);
// // });
// //
// // browseProductsScene.action(/^show_more:(.+):(\d+)$/, async (ctx) => {
// //     await ctx.answerCbQuery();
// //     const categoryCode = ctx.match[1];
// //     const page = parseInt(ctx.match[2], 10);
// //     await showProductGrid(ctx, categoryCode, page);
// // });
// //
// // browseProductsScene.action(/^select_product:(\d+)$/, async (ctx) => {
// //     await ctx.answerCbQuery();
// //     const selectedNumber = ctx.match[1];
// //     const nmID = ctx.scene.state.currentPageMap.get(selectedNumber);
// //     if (selectedNumber) {
// //         ctx.scene.state.returnPage = Math.ceil(parseInt(selectedNumber, 10) / PAGE_SIZE);
// //     }
// //     if (nmID) {
// //         ctx.scene.state.selectedNmID = nmID;
// //         await showFullProductCard(ctx, nmID);
// //     }
// // });
// //
// // browseProductsScene.action('back_to_grid', async (ctx) => {
// //     await ctx.answerCbQuery();
// //     const pageToGoBack = ctx.scene.state.returnPage || 1;
// //     await showProductGrid(ctx, ctx.scene.state.categoryCode, pageToGoBack);
// // });
// //
// // browseProductsScene.command('menu', async (ctx) => {
// //     await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
// //     return ctx.scene.leave();
// // });
// //
// // module.exports = { browseProductsScene };
