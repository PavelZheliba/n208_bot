// /scenes/cartScene.js

const {Scenes, Markup} = require('telegraf');
const Cart = require('../models/Cart');
// const ShopProduct = require('../models/ShopProduct');

async function showCart(ctx, forceReply = false) {
    const userId = ctx.from.id;
    const cart = await Cart.findOne({userId}).populate('items.productId');

    if (!cart || cart.items.length === 0) {
        const emptyCartText = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
        const keyboard = Markup.inlineKeyboard([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);

        if (ctx.callbackQuery && !forceReply) {
            try {
                await ctx.answerCbQuery();
                // --- –ó–ê–©–ò–¢–ê ---
                await ctx.editMessageText(emptyCartText, {
                    parse_mode: 'MarkdownV2',
                    reply_markup: keyboard.reply_markup
                });
            } catch (e) {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ "query is too old", –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞):", e.message);
                // –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.replyWithMarkdownV2(emptyCartText, keyboard);
            }
        } else {
            if (ctx.callbackQuery) await ctx.answerCbQuery();
            await ctx.replyWithMarkdownV2(emptyCartText, keyboard);
        }
        return;
    }

    let totalAmount = 0;
    let cartMessage = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';
    const buttons = [];
    for (const item of cart.items) {
        const product = item.productId;
        if (!product) continue; // –ó–∞—â–∏—Ç–∞, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω, –Ω–æ –æ—Å—Ç–∞–ª—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const price = product.price;
        const itemTotal = price * item.quantity;
        totalAmount += itemTotal;
        cartMessage += `*${product.title || `–¢–æ–≤–∞—Ä ${product.nmID}`}*\n`;
        cartMessage += `–†–∞–∑–º–µ—Ä: ${item.size}, ${item.quantity} —à—Ç\\. x ${price} —Ä—É–±\\. = *${itemTotal} —Ä—É–±\\.*\n\n`;
        buttons.push([
            Markup.button.callback(`-`, `cart_decrease_${product.nmID}_${item.size}`),
            Markup.button.callback(`${item.quantity} —à—Ç.`, `cart_info`),
            Markup.button.callback(`+`, `cart_increase_${product.nmID}_${item.size}`),
        ]);
        buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å`, `cart_remove_${product.nmID}_${item.size}`)]);
    }
    cartMessage += `\n*–ò—Ç–æ–≥–æ:* ${totalAmount} —Ä—É–±\\.`;
    buttons.push([Markup.button.callback('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'checkout')]);
    buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);

    const keyboard = Markup.inlineKeyboard(buttons);

    if (ctx.callbackQuery && !forceReply) {
        try {
            await ctx.answerCbQuery();
            // --- –ó–ê–©–ò–¢–ê ---
            await ctx.editMessageText(cartMessage, {parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup});
        } catch (e) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ª–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞):", e.message);
            await ctx.replyWithMarkdownV2(cartMessage, keyboard);
        }
    } else {
        if (ctx.callbackQuery) await ctx.answerCbQuery();
        await ctx.replyWithMarkdownV2(cartMessage, keyboard);
    }
}

const cartScene = new Scenes.BaseScene('CART_SCENE');
cartScene.enter(async (ctx) => {
    await showCart(ctx, true);
});

cartScene.action('refresh_cart', async (ctx) => {
    await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è—é...');
    await showCart(ctx, true);
});

cartScene.action('clear_cart', async (ctx) => {
    const telegramId = ctx.from.id;
    await Cart.updateOne({telegramId}, {$set: {items: []}});
    await ctx.answerCbQuery('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    await showCart(ctx, true);
});

cartScene.action('back_to_main_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.leave();
    try {
        await ctx.deleteMessage();
    } catch (e) {
    }
    await showMainMenu(ctx, true);
});

module.exports = {showCart, cartScene};


// // /scenes/cartScene.js
// const { Scenes, Markup } = require('telegraf');
// const Cart = require('../models/Cart');
// const Cards = require('../models/Cards');
// const ShopProduct = require('../models/ShopProduct');
// const { showMainMenu } = require('../handlers/userHandler');
//
// function escapeMarkdownV2(text) {
//     if (typeof text !== 'string') return '';
//     return text.replace(/([_\[\]()~`>#+\-=|{}.!])/g, '\\$1');
// }
//
//
//
//
//
// async function showCart(ctx) {
//     const userId = ctx.from.id;
//     const cart = await Cart.findOne({ userId }).populate('items.productId');
//
//     // === –ë–õ–û–ö –î–õ–Ø –ü–£–°–¢–û–ô –ö–û–†–ó–ò–ù–´ ===
//     if (!cart || cart.items.length === 0) {
//         const emptyCartText = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
//         const keyboard = Markup.inlineKeyboard([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);
//
//         // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
//         if (ctx.callbackQuery) {
//             // –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.
//             await ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
//             await ctx.editMessageText(emptyCartText, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
//         } else {
//             // –ï—Å–ª–∏ –Ω–µ—Ç (—ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /cart), —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//             await ctx.replyWithMarkdownV2(emptyCartText, keyboard);
//         }
//         return;
//     }
//
//     // === –ë–õ–û–ö –î–õ–Ø –ö–û–†–ó–ò–ù–´ –° –¢–û–í–ê–†–ê–ú–ò ===
//     // (–õ–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
//     let totalAmount = 0;
//     let cartMessage = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';
//     const buttons = [];
//
//     for (const item of cart.items) {
//         const product = item.productId;
//         const price = product.price;
//         const itemTotal = price * item.quantity;
//         totalAmount += itemTotal;
//
//         cartMessage += `*${product.title}*\n`;
//         cartMessage += `–†–∞–∑–º–µ—Ä: ${item.size}, ${item.quantity} —à—Ç\\. x ${price} —Ä—É–±\\. = *${itemTotal} —Ä—É–±\\.*\n\n`;
//
//         buttons.push([
//             Markup.button.callback(`-`, `cart_decrease_${product.nmID}_${item.size}`),
//             Markup.button.callback(`${item.quantity} —à—Ç.`, `cart_info`),
//             Markup.button.callback(`+`, `cart_increase_${product.nmID}_${item.size}`),
//         ]);
//         buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å`, `cart_remove_${product.nmID}_${item.size}`)]);
//     }
//
//     cartMessage += `\n*–ò—Ç–æ–≥–æ:* ${totalAmount} —Ä—É–±\\.`;
//     buttons.push([Markup.button.callback('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'checkout')]);
//     buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);
//
//     const keyboard = Markup.inlineKeyboard(buttons);
//
//     // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
//     // –¢–∞ –∂–µ —Å–∞–º–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
//     if (ctx.callbackQuery) {
//         await ctx.answerCbQuery();
//         await ctx.editMessageText(cartMessage, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
//     } else {
//         await ctx.replyWithMarkdownV2(cartMessage, keyboard);
//     }
// }
//
//
//
//
// // async function showCart(ctx, isUpdate = false) {
// //     const telegramId = ctx.from.id;
// //     const cart = await Cart.findOne({ telegramId }).lean();
// //
// //     if (!cart || cart.items.length === 0) {
// //         const emptyCartText = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
// //         const keyboard = Markup.inlineKeyboard([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]);
// //         if (isUpdate) {
// //             await ctx.editMessageText(emptyCartText, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
// //         } else {
// //             await ctx.replyWithMarkdownV2(emptyCartText, keyboard);
// //         }
// //         return;
// //     }
// //
// //     const nmIDs = cart.items.map(item => item.nmID);
// //     const populatedItems = await Cards.find({ nmID: { $in: nmIDs } }).lean();
// //     const populatedShopProducts = await ShopProduct.find({ nmID: { $in: nmIDs } }).lean();
// //
// //     let cartMessage = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';
// //     let totalPrice = 0;
// //     let itemNumber = 1;
// //
// //     for (const item of cart.items) {
// //         const card = populatedItems.find(p => p.nmID === item.nmID);
// //         const shopProduct = populatedShopProducts.find(p => p.nmID === item.nmID);
// //
// //         if (card && shopProduct) {
// //             const title = escapeMarkdownV2(card.title);
// //             const itemPrice = shopProduct.price;
// //             const totalItemPrice = item.quantity * itemPrice;
// //             totalPrice += totalItemPrice;
// //
// //             // ========================================================================
// //             // ===             –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞           ===
// //             // ========================================================================
// //             cartMessage += `${itemNumber}\\. *${title}*\n`;
// //             cartMessage += `_–ê—Ä—Ç–∏–∫—É–ª: ${item.nmID} \\| –†–∞–∑–º–µ—Ä: ${escapeMarkdownV2(item.sizeName)}_\n`;
// //             // ========================================================================
// //
// //             cartMessage += `${item.quantity} —à—Ç\\. x ${itemPrice} —Ä—É–±\\. \\= *${totalItemPrice} —Ä—É–±\\.*\n\n`;
// //             itemNumber++;
// //         }
// //     }
// //
// //     cartMessage += `*–ò—Ç–æ–≥–æ: ${totalPrice} —Ä—É–±\\.*`;
// //
// //     const keyboard = Markup.inlineKeyboard([
// //         [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'clear_cart'), Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_cart')],
// //         [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]
// //     ]);
// //
// //     try {
// //         if (isUpdate && ctx.callbackQuery) {
// //             await ctx.editMessageText(cartMessage, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
// //         } else {
// //             await ctx.reply(cartMessage, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
// //         }
// //     } catch(e) {
// //         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", e.message);
// //         if (!isUpdate) {
// //             await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.");
// //         }
// //     }
// // }
//
// const cartScene = new Scenes.BaseScene('CART_SCENE');
//
// cartScene.enter((ctx) => showCart(ctx, false));
//
// cartScene.action('refresh_cart', async (ctx) => {
//     await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è—é...');
//     await showCart(ctx, true);
// });
//
// cartScene.action('clear_cart', async (ctx) => {
//     const telegramId = ctx.from.id;
//     await Cart.updateOne({ telegramId }, { $set: { items: [] } });
//     await ctx.answerCbQuery('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
//     await showCart(ctx, true);
// });
//
// cartScene.action('back_to_main_menu', async (ctx) => {
//     await ctx.answerCbQuery();
//     await ctx.scene.leave();
//     try {
//         await ctx.deleteMessage();
//     } catch(e) {}
//     await showMainMenu(ctx, true);
// });
//
// module.exports = { showCart, cartScene };