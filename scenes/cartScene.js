// /scenes/cartScene.js
const { Scenes, Markup } = require('telegraf');
const Cart = require('../models/Cart');
const Cards = require('../models/Cards');
const ShopProduct = require('../models/ShopProduct');

// ========================================================================
// ===                   –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é              ===
// ========================================================================
// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showMainMenu –∏–∑ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
const { showMainMenu } = require('../handlers/userHandler');


function escapeMarkdownV2(text) {
    if (typeof text !== 'string') return '';
    return text.replace(/([_\[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

async function showCart(ctx, isUpdate = false) {
    const telegramId = ctx.from.id;
    const cart = await Cart.findOne({ telegramId }).lean();

    if (!cart || cart.items.length === 0) {
        const emptyCartText = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')
        ]);
        if (isUpdate) {
            await ctx.editMessageText(emptyCartText, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
        } else {
            await ctx.replyWithMarkdownV2(emptyCartText, keyboard);
        }
        return;
    }

    const nmIDs = cart.items.map(item => item.nmID);
    const populatedItems = await Cards.find({ nmID: { $in: nmIDs } }).lean();
    const populatedShopProducts = await ShopProduct.find({ nmID: { $in: nmIDs } }).lean();

    let cartMessage = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';
    let totalPrice = 0;
    let itemNumber = 1;

    for (const item of cart.items) {
        const card = populatedItems.find(p => p.nmID === item.nmID);
        const shopProduct = populatedShopProducts.find(p => p.nmID === item.nmID);

        if (card && shopProduct) {
            const title = escapeMarkdownV2(card.title);
            const itemPrice = shopProduct.price;
            const totalItemPrice = item.quantity * itemPrice;
            totalPrice += totalItemPrice;

            cartMessage += `${itemNumber}\\. *${title}*\n`;
            cartMessage += `_–ê—Ä—Ç–∏–∫—É–ª: ${item.nmID}_\n`;
            cartMessage += `${item.quantity} —à—Ç\\. x ${itemPrice} —Ä—É–±\\. \\= *${totalItemPrice} —Ä—É–±\\.*\n\n`;

            itemNumber++;
        }
    }

    cartMessage += `*–ò—Ç–æ–≥–æ: ${totalPrice} —Ä—É–±\\.*`;

    const keyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'clear_cart'),
            Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_cart')
        ],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main_menu')]
    ]);

    try {
        if (isUpdate && ctx.callbackQuery) {
            await ctx.editMessageText(cartMessage, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
        } else {
            await ctx.reply(cartMessage, { parse_mode: 'MarkdownV2', reply_markup: keyboard.reply_markup });
        }
    } catch(e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", e.message);
        if (!isUpdate) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.");
        }
    }
}

const cartScene = new Scenes.BaseScene('CART_SCENE');

cartScene.enter((ctx) => showCart(ctx, false));

cartScene.action('refresh_cart', async (ctx) => {
    await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è—é...');
    await showCart(ctx, true);
});

cartScene.action('clear_cart', async (ctx) => {
    const telegramId = ctx.from.id;
    await Cart.updateOne({ telegramId }, { $set: { items: [] } });
    await ctx.answerCbQuery('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    await showCart(ctx, true);
});

// ========================================================================
// ===           –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –í—ã–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é         ===
// ========================================================================
cartScene.action('back_to_main_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.leave();
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        await ctx.deleteMessage();
    } catch(e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ */ }

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await showMainMenu(ctx, true);
});

module.exports = { cartScene };
